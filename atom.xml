<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SsillyCat</title>
  
  <subtitle>人贵自知，自省</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ssillycat.com/"/>
  <updated>2019-08-11T09:25:36.858Z</updated>
  <id>http://ssillycat.com/</id>
  
  <author>
    <name>Night Owl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JDBC之Spring Template</title>
    <link href="http://ssillycat.com/2019/08/11/JDBC--Spring%20template/"/>
    <id>http://ssillycat.com/2019/08/11/JDBC--Spring template/</id>
    <published>2019-08-11T09:08:08.000Z</published>
    <updated>2019-08-11T09:25:36.858Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Template"><a href="#Spring-Template" class="headerlink" title="Spring Template"></a>Spring Template</h2><p>初尝JavaEE灵魂框架Spring带来的甜头</p><p>如下为Spring框架对JDBC的简单封装:挑其query()方法进行记录</p><p>需求：<br>查询所有数据，并将其封装为jdbc_emp对象的list集合</p><ul><li><p>步骤一先创建一个目标对象实体类，然后Alt+insert自动生成getter、setter和toString的方法</p><pre><code>package com.ssillycat.jdbctest;import java.util.Date;public class jdbc_emp {    private Integer id;    private String ename;    private Integer job_id;    private Integer mgr;    private Date joindate;    private Double salary;    private Double bonus;    private Integer dept_id;}</code></pre></li><li><p>步骤二导入jar包，配置文件和工具类</p></li><li><p>步骤三如下：</p><pre><code>package com.ssillycat.jdbctest;import org.springframework.jdbc.core.BeanPropertyRowMapper;import org.springframework.jdbc.core.JdbcTemplate;import java.util.List;public class jdbc_test {    public static void main(String[] args) {        //1.创建template对象        JdbcTemplate template = new JdbcTemplate(JDBC_Druid_utils.getDatasource());        //2.定义sql语句        String sql = &quot;select * from emp&quot;;        //3.执行sql语句        List&lt;jdbc_emp&gt; list = template.query(sql, new BeanPropertyRowMapper&lt;jdbc_emp&gt;(jdbc_emp.class));        //4.遍历list        for (jdbc_emp jdbc_emp : list) {            System.out.println(jdbc_emp);        }    }}</code></pre></li></ul><ul><li><p>解析：BeanPropertyRowMapper<jdbc_emp>(jdbc_emp.class)</jdbc_emp></p><pre><code>BeanPropertyRowMapper&lt;&gt;()已经实现了RowMapper中的mapRow()方法（mapRow方法中可以生成jdbc_emp的对象）- 泛型：目标对象类型，如：jdbc_emp- 参数：目标对象的字节码文件，如：jdbc_emp.class</code></pre></li></ul><ul><li><p>template.query(sql, new BeanPropertyRowMapper<jdbc_emp>(jdbc_emp.class))</jdbc_emp></p><pre><code>返回的是目标对象的list集合通过这个方法，可以快速地便捷地获取数据表中的所有数据（数据封装为对象，一行一个对象）</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      Spring Template
初尝JavaEE灵魂框架Spring带来的甜头

如下为Spring框架对JDBC的简单封装:挑其query()方法进行记录

需求：
查询所有数据，并将其封装为jdbc_emp对象的list集合

 * 步骤一先创建一个目标对象实体类，然后Alt+insert自动生成getter、setter和toString的方法
   
   package com.ssillycat.jdbctest;
   
   import java.util.Date;
   
   public class jdbc_emp {
       private Integer 
    
    </summary>
    
      <category term="JAVA" scheme="http://ssillycat.com/categories/JAVA/"/>
    
    
      <category term="get√" scheme="http://ssillycat.com/tags/get%E2%88%9A/"/>
    
      <category term="JDBC" scheme="http://ssillycat.com/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>防止sql注入</title>
    <link href="http://ssillycat.com/2019/08/10/%E9%98%B2%E6%AD%A2SQL%E6%B3%A8%E5%85%A5/"/>
    <id>http://ssillycat.com/2019/08/10/防止SQL注入/</id>
    <published>2019-08-10T02:14:08.000Z</published>
    <updated>2019-08-10T03:32:40.813Z</updated>
    
    <content type="html"><![CDATA[<h2 id="防止SQL注入"><a href="#防止SQL注入" class="headerlink" title="防止SQL注入"></a>防止SQL注入</h2><h3 id="SQL注入原理："><a href="#SQL注入原理：" class="headerlink" title="SQL注入原理："></a>SQL注入原理：</h3><p>在拼接sql时，有一些sql的特殊关键字参与字符串的拼接<br>这种情况会导致安全性问题</p><pre><code>select * from info where name = &apos;alkfldaf&apos; and password = &apos;a&apos; or &apos;a&apos; = &apos;a&apos;</code></pre><p>上面的sql语句解析为两部分：</p><pre><code>1. select * from info where name = &apos;alkfldaf&apos; and password = &apos;a&apos;2. &apos;a&apos; = &apos;a&apos;</code></pre><p>两者通过or分割，or判断有真则真，故会查询成功</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="1-prepareStatement"><a href="#1-prepareStatement" class="headerlink" title="1. prepareStatement:"></a>1. prepareStatement:</h4><pre><code>package com.ssillycat.jdbc;import com.ssillycat.utils.jdbc_utils;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;public class login_preparestmt {    public static boolean login(String username, String password) {        Connection conn = null;        PreparedStatement pstmt = null;        ResultSet rs = null;        boolean flag = false;        try {            //1.注册并连接            conn = jdbc_utils.conn();            //2.编辑SQL语句            String sql = &quot;select * from info where name = ? and password = ?&quot;;            //3.获取执行sql的预编译对象并赋值            pstmt = conn.prepareStatement(sql);            pstmt.setString(1, username);            pstmt.setString(2, password);            //4.执行sql语句            rs = pstmt.executeQuery();            flag = rs.next();        } catch (SQLException e) {            e.printStackTrace();        } finally {            //5.释放资源            jdbc_utils.close(rs, pstmt, conn);        }        return flag;    }    public static void main(String[] args) {        boolean login = login(&quot;xiaoming&quot;, &quot;root&quot;);        System.out.println(login);    }}</code></pre><h4 id="2-SQL语句中不传参数，查询所有数据"><a href="#2-SQL语句中不传参数，查询所有数据" class="headerlink" title="2. SQL语句中不传参数，查询所有数据"></a>2. SQL语句中不传参数，查询所有数据</h4><pre><code>package com.ssillycat.jdbc;import com.ssillycat.utils.jdbc_utils;import java.sql.Connection;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;public class insert_info {    public static String login(String username, String password) {        Connection conn = null;        Statement stmt = null;        ResultSet rs = null;        String loginornot = &quot;登录失败&quot;;        try {            //1.注册并连接            conn = jdbc_utils.conn();            //2.获取执行sql对象            stmt = conn.createStatement();            //3.编辑SQL语句            String sql = &quot;select name,password from info&quot;;            //4.执行sql语句            rs = stmt.executeQuery(sql);            while (rs.next()) {                if (username.equals(rs.getString(1)) &amp;&amp; password.equals(rs.getString(2))) {                    loginornot = &quot;登录成功&quot;;                }            }        } catch (SQLException e) {            e.printStackTrace();        } finally {            //5.释放资源            jdbc_utils.close(stmt, conn);        }        return loginornot;    }    public static void main(String[] args) {        String login = insert_info.login(&quot;xiaoming&quot;, &quot;root&quot;);        System.out.println(login);    }}</code></pre><h5 id="第二点在DML中不适用，因其必须传递参数"><a href="#第二点在DML中不适用，因其必须传递参数" class="headerlink" title="第二点在DML中不适用，因其必须传递参数"></a>第二点在DML中不适用，因其必须传递参数</h5><pre><code>package com.ssillycat.jdbc;import com.ssillycat.utils.jdbc_utils;import java.sql.Connection;import java.sql.SQLException;import java.sql.Statement;public class insert_info {    public static void login(String name) {        Connection conn = null;        Statement stmt = null;        int rs = -1;        try {            //1.注册并连接            conn = jdbc_utils.conn();            //2.获取执行sql对象            stmt = conn.createStatement();            //3.编辑SQL语句            String sql = &quot;update info set id = 6 where name=&apos;&quot;+name+&quot;&apos;&quot;;            System.out.println(sql);            //4.执行sql语句            rs= stmt.executeUpdate(sql);            System.out.println(rs);        } catch (SQLException e) {            e.printStackTrace();        } finally {            //5.释放资源            jdbc_utils.close(stmt, conn);        }    }    public static void main(String[] args) {        insert_info.login(&quot;xiaoming&apos; or &apos;a&apos;= &apos;a&quot;);    }}</code></pre><p>此处会修改所有ID</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  虽然第二点也可以防止sql注入，但是可能存在占用大量内存的情况，所以后期尽量只用prepareStatement()方法获取执行sql语句的对象</p>]]></content>
    
    <summary type="html">
    
      防止SQL注入
SQL注入原理：
在拼接sql时，有一些sql的特殊关键字参与字符串的拼接
这种情况会导致安全性问题

select * from info where name = &#39;alkfldaf&#39; and password = &#39;a&#39; or &#39;a&#39; = &#39;a&#39;

上面的sql语句解析为两部分：

1. select * from info where name = &#39;alkfldaf&#39; and password = &#39;a&#39;
2. &#39;a&#39; = &#39;a&#39;

两者通过or分割，or判断有真则真，故会查询成功

解决方案
1. prepareStatement:
package com.ssil
    
    </summary>
    
      <category term="JAVA" scheme="http://ssillycat.com/categories/JAVA/"/>
    
    
      <category term="JDBC" scheme="http://ssillycat.com/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>JDBC自写工具类踩坑记</title>
    <link href="http://ssillycat.com/2019/08/10/JDBC%E8%87%AA%E5%86%99%E5%B7%A5%E5%85%B7%E7%B1%BB%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    <id>http://ssillycat.com/2019/08/10/JDBC自写工具类踩坑记/</id>
    <published>2019-08-09T16:00:08.000Z</published>
    <updated>2019-08-10T13:13:12.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JDBC自写工具类踩坑记"><a href="#JDBC自写工具类踩坑记" class="headerlink" title="JDBC自写工具类踩坑记"></a>JDBC自写工具类踩坑记</h2><h3 id="首先，工具类源码如下："><a href="#首先，工具类源码如下：" class="headerlink" title="首先，工具类源码如下："></a>首先，工具类源码如下：</h3><pre><code>package com.ssillycat.utils;import java.io.FileInputStream;import java.io.IOException;import java.sql.*;import java.util.Properties;public class jdbc_utils {    /*静态变量，包括注册驱动需要传的参数，连接对象需要传的url，user，password，    这些参数都存在properties中*/    private static String url;    private static String user;    private static String password;    private static String driver;    //静态代码块，对静态变量进行赋值    static {        try {            //读取properties中的内容            Properties pro = new Properties();            String path  = jdbc_utils.class.getClassLoader().getResource(&quot;jdbc.properties&quot;).getPath();            pro.load(new FileReader(path));            //获取数据，赋值            url = pro.getProperty(&quot;url&quot;);            user = pro.getProperty(&quot;user&quot;);            password = pro.getProperty(&quot;password&quot;);            driver = pro.getProperty(&quot;driver&quot;);            //注册驱动            Class.forName(driver);        } catch (IOException e) {            e.printStackTrace();        } catch (ClassNotFoundException e) {            e.printStackTrace();        }catch (NullPointerException e) {            e.printStackTrace();        }    }    /**     * 获取资源     * @return     * @throws SQLException     */    public static Connection conn() throws SQLException {        return DriverManager.getConnection(url, user, password);    }    /**     * 释放资源     * @param stmt     * @param conn     */    public static void close(Statement stmt,Connection conn){        if( stmt != null){            try {                stmt.close();            } catch (SQLException e) {                e.printStackTrace();            }        }        if( conn != null){            try {                conn.close();            } catch (SQLException e) {                e.printStackTrace();            }        }    }    /**     * 释放资源[重载]     * @param stmt     * @param conn     */    public static void close(ResultSet rs,Statement stmt, Connection conn){        if( rs != null){            try {                rs.close();            } catch (SQLException e) {                e.printStackTrace();            }        }        if( stmt != null){            try {                stmt.close();            } catch (SQLException e) {                e.printStackTrace();            }        }        if( conn != null){            try {                conn.close();            } catch (SQLException e) {                e.printStackTrace();            }        }    }}</code></pre><h3 id="properties储存内容"><a href="#properties储存内容" class="headerlink" title="properties储存内容"></a>properties储存内容</h3><pre><code>url=jdbc:mysql://localhost:3306/db2user=rootpassword=rootdriver=com.mysql.jdbc.Driver</code></pre><h3 id="踩坑记"><a href="#踩坑记" class="headerlink" title="踩坑记"></a>踩坑记</h3><pre><code>1.properties中的储存的值不应带有双引号，错误如下：    url=&quot;jdbc:mysql://localhost:3306/db2&quot;    user=&quot;root&quot;    password=&quot;root&quot;    driver=&quot;com.mysql.jdbc.Driver&quot;    带有双引号properties对象通过getProperty()方法返回的字符串也是会带有双引号，    储存在静态属性中作为参数在conn()方法中调用会抛出连接异常：    java.sql.SQLException: No suitable driver found for &quot;jdbc:mysql://localhost:3306/db2&quot;2.properties的getProperty()方法中的参数传的是字符串，错误如下：    url = pro.getProperty(url);    user = pro.getProperty(user);    password = pro.getProperty(password);    driver = pro.getProperty(driver);    因为第一点导致的第二点的错误，敲代码敲糊涂了。3.driver=com.mysql.jdbc.Driver中的Driver首写字母大写</code></pre><h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><pre><code>1.视频教学自以为会了，学习的这一个多月中，大多只是视频过了一遍，走马观花，以后得多跟着敲，最好自己先想办法敲一遍，对比老师的来学习。2.过于依赖IDEA，为了追求代码速度忽略了许多东西。阿西吧！</code></pre><!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --><blockquote class="blockquote-center">犯的错多了，也就懂（tou）得（fa）多（mei）了（le）</blockquote>]]></content>
    
    <summary type="html">
    
      JDBC自写工具类踩坑记
首先，工具类源码如下：
package com.ssillycat.utils;

import java.io.FileInputStream;
import java.io.IOException;
import java.sql.*;
import java.util.Properties;

public class jdbc_utils {
    /*静态变量，包括注册驱动需要传的参数，连接对象需要传的url，user，password，
    这些参数都存在properties中*/
    private static String url;
   
    
    </summary>
    
      <category term="JAVA" scheme="http://ssillycat.com/categories/JAVA/"/>
    
    
      <category term="JDBC" scheme="http://ssillycat.com/tags/JDBC/"/>
    
      <category term="脱发" scheme="http://ssillycat.com/tags/%E8%84%B1%E5%8F%91/"/>
    
      <category term="蓝瘦" scheme="http://ssillycat.com/tags/%E8%93%9D%E7%98%A6/"/>
    
  </entry>
  
  <entry>
    <title>终于把博客弄好了</title>
    <link href="http://ssillycat.com/2019/08/04/%E5%8D%9A%E5%AE%A2%E2%88%9A/"/>
    <id>http://ssillycat.com/2019/08/04/博客√/</id>
    <published>2019-08-04T09:55:54.000Z</published>
    <updated>2019-08-04T10:23:33.535Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --><blockquote class="blockquote-center">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote><p><font size="2" color="blue"><center>用了两天时间，终于把博客给搭建好了，累并快乐着</center></font></p>]]></content>
    
    <summary type="html">
    
      优秀的人，不是不合群，而是他们合群的人里面没有你用了两天时间，终于把博客给搭建好了，累并快乐着
    
    </summary>
    
      <category term="多动症" scheme="http://ssillycat.com/categories/%E5%A4%9A%E5%8A%A8%E7%97%87/"/>
    
    
      <category term="开心" scheme="http://ssillycat.com/tags/%E5%BC%80%E5%BF%83/"/>
    
      <category term="脱发" scheme="http://ssillycat.com/tags/%E8%84%B1%E5%8F%91/"/>
    
  </entry>
  
</feed>
