<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[防止sql注入]]></title>
    <url>%2F2019%2F08%2F10%2F%E9%98%B2%E6%AD%A2SQL%E6%B3%A8%E5%85%A5%2F</url>
    <content type="text"><![CDATA[防止SQL注入SQL注入原理：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接这种情况会导致安全性问题 select * from info where name = &apos;alkfldaf&apos; and password = &apos;a&apos; or &apos;a&apos; = &apos;a&apos;上面的sql语句解析为两部分： 1. select * from info where name = &apos;alkfldaf&apos; and password = &apos;a&apos; 2. &apos;a&apos; = &apos;a&apos;两者通过or分割，or判断有真则真，故会查询成功 解决方案1. prepareStatement:package com.ssillycat.jdbc; import com.ssillycat.utils.jdbc_utils; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; public class login_preparestmt { public static boolean login(String username, String password) { Connection conn = null; PreparedStatement pstmt = null; ResultSet rs = null; boolean flag = false; try { //1.注册并连接 conn = jdbc_utils.conn(); //2.编辑SQL语句 String sql = &quot;select * from info where name = ? and password = ?&quot;; //3.获取执行sql的预编译对象并赋值 pstmt = conn.prepareStatement(sql); pstmt.setString(1, username); pstmt.setString(2, password); //4.执行sql语句 rs = pstmt.executeQuery(); flag = rs.next(); } catch (SQLException e) { e.printStackTrace(); } finally { //5.释放资源 jdbc_utils.close(rs, pstmt, conn); } return flag; } public static void main(String[] args) { boolean login = login(&quot;xiaoming&quot;, &quot;root&quot;); System.out.println(login); } }2. SQL语句中不传参数，查询所有数据package com.ssillycat.jdbc; import com.ssillycat.utils.jdbc_utils; import java.sql.Connection; import java.sql.ResultSet; import java.sql.SQLException; import java.sql.Statement; public class insert_info { public static String login(String username, String password) { Connection conn = null; Statement stmt = null; ResultSet rs = null; String loginornot = &quot;登录失败&quot;; try { //1.注册并连接 conn = jdbc_utils.conn(); //2.获取执行sql对象 stmt = conn.createStatement(); //3.编辑SQL语句 String sql = &quot;select name,password from info&quot;; //4.执行sql语句 rs = stmt.executeQuery(sql); while (rs.next()) { if (username.equals(rs.getString(1)) &amp;&amp; password.equals(rs.getString(2))) { loginornot = &quot;登录成功&quot;; } } } catch (SQLException e) { e.printStackTrace(); } finally { //5.释放资源 jdbc_utils.close(stmt, conn); } return loginornot; } public static void main(String[] args) { String login = insert_info.login(&quot;xiaoming&quot;, &quot;root&quot;); System.out.println(login); } }第二点在DML中不适用，因其必须传递参数package com.ssillycat.jdbc; import com.ssillycat.utils.jdbc_utils; import java.sql.Connection; import java.sql.SQLException; import java.sql.Statement; public class insert_info { public static void login(String name) { Connection conn = null; Statement stmt = null; int rs = -1; try { //1.注册并连接 conn = jdbc_utils.conn(); //2.获取执行sql对象 stmt = conn.createStatement(); //3.编辑SQL语句 String sql = &quot;update info set id = 6 where name=&apos;&quot;+name+&quot;&apos;&quot;; System.out.println(sql); //4.执行sql语句 rs= stmt.executeUpdate(sql); System.out.println(rs); } catch (SQLException e) { e.printStackTrace(); } finally { //5.释放资源 jdbc_utils.close(stmt, conn); } } public static void main(String[] args) { insert_info.login(&quot;xiaoming&apos; or &apos;a&apos;= &apos;a&quot;); } }此处会修改所有ID 总结 虽然第二点也可以防止sql注入，但是可能存在占用大量内存的情况，所以后期尽量只用prepareStatement()方法获取执行sql语句的对象]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JDBC自写工具类踩坑记]]></title>
    <url>%2F2019%2F08%2F10%2FJDBC%E8%87%AA%E5%86%99%E5%B7%A5%E5%85%B7%E7%B1%BB%E8%B8%A9%E5%9D%91%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[JDBC自写工具类踩坑记首先，工具类源码如下：package com.ssillycat.utils; import java.io.FileInputStream; import java.io.IOException; import java.sql.*; import java.util.Properties; public class jdbc_utils { /*静态变量，包括注册驱动需要传的参数，连接对象需要传的url，user，password， 这些参数都存在properties中*/ private static String url; private static String user; private static String password; private static String driver; //静态代码块，对静态变量进行赋值 static { try { //读取properties中的内容 Properties pro = new Properties(); String path = jdbc_utils.class.getClassLoader().getResource(&quot;jdbc.properties&quot;).getPath(); pro.load(new FileInputStream(path)); //获取数据，赋值 url = pro.getProperty(&quot;url&quot;); user = pro.getProperty(&quot;user&quot;); password = pro.getProperty(&quot;password&quot;); driver = pro.getProperty(&quot;driver&quot;); //注册驱动 Class.forName(driver); } catch (IOException e) { e.printStackTrace(); } catch (ClassNotFoundException e) { e.printStackTrace(); }catch (NullPointerException e) { e.printStackTrace(); } } /** * 获取资源 * @return * @throws SQLException */ public static Connection conn() throws SQLException { return DriverManager.getConnection(url, user, password); } /** * 释放资源 * @param stmt * @param conn */ public static void close(Statement stmt,Connection conn){ if( stmt != null){ try { stmt.close(); } catch (SQLException e) { e.printStackTrace(); } } if( conn != null){ try { conn.close(); } catch (SQLException e) { e.printStackTrace(); } } } /** * 释放资源[重载] * @param stmt * @param conn */ public static void close(ResultSet rs,Statement stmt, Connection conn){ if( rs != null){ try { rs.close(); } catch (SQLException e) { e.printStackTrace(); } } if( stmt != null){ try { stmt.close(); } catch (SQLException e) { e.printStackTrace(); } } if( conn != null){ try { conn.close(); } catch (SQLException e) { e.printStackTrace(); } } } }properties储存内容url=jdbc:mysql://localhost:3306/db2 user=root password=root driver=com.mysql.jdbc.Driver踩坑记1.properties中的储存的值不应带有双引号，错误如下： url=&quot;jdbc:mysql://localhost:3306/db2&quot; user=&quot;root&quot; password=&quot;root&quot; driver=&quot;com.mysql.jdbc.Driver&quot; 带有双引号properties对象通过getProperty()方法返回的字符串也是会带有双引号， 储存在静态属性中作为参数在conn()方法中调用会抛出连接异常： java.sql.SQLException: No suitable driver found for &quot;jdbc:mysql://localhost:3306/db2&quot; 2.properties的getProperty()方法中的参数传的是字符串，错误如下： url = pro.getProperty(url); user = pro.getProperty(user); password = pro.getProperty(password); driver = pro.getProperty(driver); 因为第一点导致的第二点的错误，敲代码敲糊涂了。 3.driver=com.mysql.jdbc.Driver中的Driver首写字母大写原因：1.视频教学自以为会了，学习的这一个多月中，大多只是视频过了一遍，走马观花， 以后得多跟着敲，最好自己先想办法敲一遍，对比老师的来学习。 2.过于依赖IDEA，为了追求代码速度忽略了许多东西。阿西吧！ 犯的错多了，也就懂（tou）得（fa）多（mei）了（le）]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>蓝瘦</tag>
        <tag>脱发</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[终于把博客弄好了]]></title>
    <url>%2F2019%2F08%2F04%2F%E5%8D%9A%E5%AE%A2%E2%88%9A%2F</url>
    <content type="text"><![CDATA[优秀的人，不是不合群，而是他们合群的人里面没有你 用了两天时间，终于把博客给搭建好了，累并快乐着]]></content>
      <categories>
        <category>多动症</category>
      </categories>
      <tags>
        <tag>脱发</tag>
        <tag>开心</tag>
      </tags>
  </entry>
</search>
